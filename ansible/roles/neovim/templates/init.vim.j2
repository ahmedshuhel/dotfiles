set nocompatible
set clipboard=unnamed
set exrc
filetype off

filetype plugin indent on
syntax on
syntax enable
language en_US

set background=dark
set foldmethod=indent
set smartindent
set tabstop=2
set shiftwidth=2
set expandtab

set number
set relativenumber

set hlsearch
set incsearch
set mouse=a
set laststatus=2 "airline
set list                                            "Display unprintable characters f12 - switches
set listchars=tab:•\ ,trail:•,extends:»,precedes:«  "Unprintable chars mapping

{% if ansible_os_family|lower == 'darwin' %}
let g:python_host_prog = '/usr/local/bin/python2'
let g:python3_host_prog = '/usr/local/bin/python3'
{% else %}
let g:python_host_prog = '/usr/bin/python2'
let g:python3_host_prog = '/usr/bin/python3'
{% endif %}

let python_highlight_all=1

call plug#begin('{{ plugin_dir }}')

Plug 'Shougo/vimproc.vim', {'do' : 'make'}
Plug 'skywind3000/asyncrun.vim'
Plug 'sheerun/vim-polyglot'
Plug 'moll/vim-node'
Plug 'Chiel92/vim-autoformat'
Plug 'altercation/vim-colors-solarized'
Plug 'bling/vim-airline'
Plug 'vim-airline/vim-airline-themes'
Plug 'mattn/emmet-vim'
Plug 'marijnh/tern_for_vim'
Plug 'raimondi/delimitmate'
Plug 'w0rp/ale'
Plug 'pangloss/vim-javascript'
Plug 'christoomey/vim-tmux-navigator'
Plug 'christoomey/vim-tmux-runner'
Plug 'tpope/vim-fugitive'
Plug 'tpope/vim-commentary'
Plug 'tpope/vim-vinegar'
Plug 'tpope/vim-rails'
Plug 'airblade/vim-gitgutter'
Plug 'tpope/vim-unimpaired'
Plug 'kshenoy/vim-signature'
Plug 'terryma/vim-multiple-cursors'
Plug 'junegunn/goyo.vim'
Plug 'junegunn/limelight.vim'
Plug 'junegunn/vim-slash'
Plug 'othree/javascript-libraries-syntax.vim'
Plug 'beloglazov/vim-online-thesaurus'
Plug 'editorconfig/editorconfig-vim'
Plug 'SirVer/ultisnips'
Plug 'honza/vim-snippets'
Plug 'junegunn/fzf', { 'dir': '~/.fzf', 'do': './install --all' }
Plug 'junegunn/fzf.vim'
Plug 'racer-rust/vim-racer'
Plug 'janko-m/vim-test'
Plug 'fatih/vim-go'
Plug 'autozimu/LanguageClient-neovim', {
    \ 'branch': 'next',
    \ 'do': 'bash install.sh',
    \ }
Plug 'Shougo/deoplete.nvim', { 'do': ':UpdateRemotePlugins' }
Plug 'OmniSharp/omnisharp-vim'
Plug 'OrangeT/vim-csharp'
Plug 'python-mode/python-mode', { 'branch': 'develop' }

call plug#end()

colorscheme solarized



"Language Server

autocmd BufRead *.ts setlocal filetype=typescript
autocmd BufRead *.tsx setlocal filetype=typescript
autocmd BufRead *.rs setlocal filetype=rust
autocmd BufRead *.js setlocal filetype=javascript
autocmd BufRead *.jsx setlocal filetype=javascript

let g:LanguageClient_loggingFile = '/tmp/LanguageClient.log'
let g:LanguageClient_loggingLevel = 'INFO'
let g:LanguageClient_serverStderr = '/tmp/LanguageServer.log'
let g:LanguageClient_serverCommands = {
    \ 'javascript': ['javascript-typescript-stdio'],
    \ 'typescript': ['javascript-typescript-stdio'],
    \ 'rust': ['rustup', 'run', 'stable', 'rls'],
    \ }

set formatexpr=LanguageClient#textDocument_rangeFormatting_sync()
set signcolumn=yes

nnoremap <F5> :call LanguageClient_contextMenu()<CR>
autocmd FileType javascript nnoremap gd :call LanguageClient#textDocument_definition()<CR>
autocmd FileType javascript nnoremap K :call LanguageClient#textDocument_hover()<CR>

"Pymode
call pymode#default('g:pymode_rope', 1)
let g:pymode_rope_goto_definition_bind = 'gd'
let g:pymode_syntax_all = 1
let g:pymode_rope_completion = 0
let g:pymode_rope_goto_definition_cmd = 'vnew'
let g:pymode_rope_rename_bind = '<leader>rr'
let g:pymode_rope_extract_method_bind = '<leader>rem'
let g:pymode_rope_extract_variable_bind = '<leader>rev'
let g:pymode_lint_cwindow = 0

"Functions
function! ApplyJavaScriptConfig()
  set errorformat=%f\(%l\\,%c\):\ %trror\ TS%n:\ %m
  set makeprg=tsc\ --noEmit
endfunction

function! DistractionFreeModeOn()
  :silent exec "!tmux set -g status off"
  color seoul256
  Goyo
  Limelight0.5
endfunction

function! DistractionFreeModeOff()
  :silent exec "!tmux set -g status on"
  Limelight!
  Goyo!
  color solarized
endfunction

function! GetPlatform()
    if has("win32") || has("win64")
        return "win"
    else
        return "nix"
    endif
endfunction

"========

"Deoplete
let g:deoplete#enable_at_startup = 1
"========

"UltiSnips
let g:UltiSnipsExpandTrigger="<c-j>"
"========


"Airline
let g:airline_theme='powerlineish'
let g:airline_powerline_fonts = 1
let g:airline_skip_empty_sections = 1
"========

"Emmet
let g:user_emmet_leader_key='<c-y>'
"========

"Cursor
autocmd GUIEnter * set vb t_vb= " for your GUI
autocmd VimEnter * set vb t_vb=

let &t_ti.="\e[1 q"
let &t_SI.="\e[5 q"
let &t_EI.="\e[1 q"
let &t_te.="\e[0 q"
"========

"Temp Files
set directory=~/.vim/swapfiles//
set wildignore+=*/tmp/*,*.so,*.swp,*.zip
set wildignore+=*\\tmp\\*,*.swp,*.zip,*.exe,*.pyc
"========

"ALE
let g:ale_linters_explicit = 1
let g:ale_sign_column_always = 1
let g:ale_sign_error = '>'
let g:ale_sign_warning = '-'

let g:ale_fixers = {
\   'javascript': [
\       'eslint',
\       'prettier',
\   ]
\}

let g:ale_javascript_prettier_options = '--single-quote'
let g:ale_rust_rls_executable = 'rls'
"========

"LSP Settings
if executable('typescript-language-server')
    au User lsp_setup call lsp#register_server({
        \ 'name': 'typescript-language-server',
        \ 'cmd': {server_info->[&shell, &shellcmdflag, 'typescript-language-server', '--stdio']},
        \ 'root_uri':{server_info->lsp#utils#path_to_uri(lsp#utils#find_nearest_parent_file_directory(lsp#utils#get_buffer_path(), 'tsconfig.json'))},
        \ 'whitelist': ['typescript', 'javascript', 'javascript.jsx'],
        \ })
endif
"========

"AsyncRun Settings
let g:asyncrun_open = 8
command! -bang -nargs=* -complete=file Make AsyncRun -program=make @ <args>
"========

"Typescript/JavaScript Settings
augroup filetype_javascript
    autocmd!
    autocmd FileType javascript.jsx call ApplyJavaScriptConfig()
    autocmd FileType javascript.jsx nnoremap <leader>fu :Ggrep <cword><CR>
augroup END
"========

"VIM Test
let test#strategy = "neovim"
let test#python#runner = 'pytest'

nmap <silent> tn :TestNearest<CR>
nmap <silent> tf :TestFile<CR>
nmap <silent> ts :TestSuite<CR>
nmap <silent> tl :TestLast<CR>
nmap <silent> tg :TestVisit<CR>
"========

"Syntax Highlighting
hi link pythonImport Include
hi link pythonBuiltinFunc PreProc
"========

"Keymaps
noremap <plug>(slash-after) zz
if has('timers')
  " Blink 2 times with 50ms interval
  noremap <expr> <plug>(slash-after) 'zz'.slash#blink(2, 50)
endif

nnoremap df= :call DistractionFreeModeOn()<CR>
nnoremap df- :call DistractionFreeModeOff()<CR>
nnoremap <C-p> :GFiles<CR>
nnoremap <F12> :Ggrep <cword><CR>

inoremap <expr> <Tab> pumvisible() ? "\<C-n>" : "\<Tab>"
inoremap <expr> <S-Tab> pumvisible() ? "\<C-p>" : "\<S-Tab>"
inoremap <expr> <cr> pumvisible() ? "\<C-y>" : "\<cr>"
"========

let g:Omnisharp_start_server = 1

"Omnisharp
let g:OmniSharp_server_type = 'roslyn'
if GetPlatform() == "win"
    let g:OmniSharp_server_path = join([expand('~'), 'Tools', 'omnisharp-server', 'omnisharp', 'OmniSharp.exe'], '/')
endif

" Contextual code actions (requires CtrlP or unite.vim)
nnoremap <leader><space> :OmniSharpGetCodeActions<cr>

" Run code actions with text selected in visual mode to extract method
vnoremap <leader><space> :call OmniSharp#GetCodeActions('visual')<cr>

" rename with dialog
nnoremap <leader>rr :OmniSharpRename<cr>

" rename without dialog - with cursor on the symbol to rename... ':Rename newname'
command! -nargs=1 Rename :call OmniSharp#RenameTo("<args>")

" Force OmniSharp to reload the solution. Useful when switching branches etc.
nnoremap <leader>rl :OmniSharpReloadSolution<cr>
nnoremap <leader>cf :OmniSharpCodeFormat<cr>

" Load the current .cs file to the nearest project
nnoremap <leader>tp :OmniSharpAddToProject<cr>

" (Experimental - uses vim-dispatch or vimproc plugin) - Start the omnisharp server for the current solution
nnoremap <leader>ss :OmniSharpStartServer<cr>
nnoremap <leader>sp :OmniSharpStopServer<cr>

" Add syntax highlighting for types and interfaces
nnoremap <leader>th :OmniSharpHighlightTypes<cr>

" Enable snippet completion, requires completeopt-=preview
let g:OmniSharp_want_snippet=1

" Enable code actions via ctrlp
let g:OmniSharp_selector_ui = 'fzf'

augroup omnisharp_commands
    autocmd!

    "Set autocomplete function to OmniSharp (if not using YouCompleteMe completion plugin)
    autocmd FileType cs setlocal omnifunc=OmniSharp#Complete

    " Synchronous build (blocks Vim)
    "autocmd FileType cs nnoremap <F5> :wa!<cr>:OmniSharpBuild<cr>
    " Builds can also run asynchronously with vim-dispatch installed
    autocmd FileType cs nnoremap <leader>b :wa!<cr>:OmniSharpBuildAsync<cr>
    " Automatic syntax check on events (TextChanged requires Vim 7.4)
    "autocmd BufEnter,TextChanged,InsertLeave *.cs SyntasticCheck

    " Automatically add new cs files to the nearest project on save
    "autocmd BufWritePost *.cs call OmniSharp#AddToProject()

    " Show type information automatically when the cursor stops moving
    autocmd CursorHold *.cs call OmniSharp#TypeLookupWithoutDocumentation()

    " Following commands are contextual, based on the current cursor position.
    autocmd FileType cs nnoremap gd :OmniSharpGotoDefinition<cr>
    autocmd FileType cs nnoremap <leader>fi :OmniSharpFindImplementations<cr>
    autocmd FileType cs nnoremap <leader>ft :OmniSharpFindType<cr>
    autocmd FileType cs nnoremap <leader>fs :OmniSharpFindSymbol<cr>
    autocmd FileType cs nnoremap <leader>fu :OmniSharpFindUsages<cr>
    " Finds members in the current buffer
    autocmd FileType cs nnoremap <leader>fm :OmniSharpFindMembers<cr>
    " Cursor can be anywhere on the line containing an issue
    autocmd FileType cs nnoremap <leader>x  :OmniSharpFixIssue<cr>
    autocmd FileType cs nnoremap <leader>fx :OmniSharpFixUsings<cr>
    autocmd FileType cs nnoremap <leader>tt :OmniSharpTypeLookup<cr>
    autocmd FileType cs nnoremap <leader>dc :OmniSharpDocumentation<cr>
    " Navigate up by method/property/field
    autocmd FileType cs nnoremap <leader>p :OmniSharpNavigateUp<cr>
    " Navigate down by method/property/field
    autocmd FileType cs nnoremap <leader>n :OmniSharpNavigateDown<cr>
  augroup END
"========

set secure
