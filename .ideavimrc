" # Tips to find/map/execute actions -------------------

" ## Executing actions:
" :action {action_id}

" ## Execute an action by id. Works from Ex command line.
" <Action>(*action_id*)
" For the mappings you can use a special <Action> keyword. Don't forget the parentheses.

" ## Finding actions:
" :actionlist [pattern]

" ## Find IDE actions by id or keymap pattern (E.g. :actionlist extract, :actionlist <C-D)
" In addition to :actionlist command, IdeaVim provides IdeaVim: track action Ids option to extract the ids of executed command.
" This option can be found in "Search everywhere" (double shift).


""" Map leader to backslash ---------------------
let mapleader=" "
set visualbell
set noerrorbells

""" Plugins  --------------------------------
set surround
set multiple-cursors
set commentary
set argtextobj
set easymotion
set textobj-entire
set ReplaceWithRegister

""" Plugin settings -------------------------
let g:argtextobj_pairs="[:],(:),<:>"

""" Common settings -------------------------
set showmode
set so=5
set incsearch
set nu

""" Idea specific settings ------------------
set ideajoin
set ideastatusicon=gray
set idearefactormode=keep

""" Mappings --------------------------------
map gi :action GotoImplementation<CR>
map gr :action FindUsages<CR>

map <leader>f <Action>(ReformatCode)
map <leader>/ <Action>(CommentByLineComment)
map <leader>o <Action>(FileStructurePopup)
map <leader>rn <Action>(RenameElement)

map <leader>b <Action>(ToggleLineBreakpoint)
map <leader>d <Action>(Debug)
map <leader>c <Action>(Stop)

map T <Action>(Switcher)

map <leader>zz <Action>(ToggleDistractionFreeMode)

map ]d <Action>(GotoNextError)
map [d <Action>(GotoPreviousError)
